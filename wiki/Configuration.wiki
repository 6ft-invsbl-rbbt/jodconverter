#summary Configuration

= Configuration =

When using `ManagedProcessOfficeManager`, there are a number of settings that can be configured. Some of the default settings used by JODConverter have been chosen because they have a greater chance of working out of the box, but they are not necessarily the optimal ones.

== Template Profile Dir ==

The `OfficeManager` creates a temporary profile dir for its OOo process, to avoid interfering with e.g. another OOo instance being used by the user.

By default this temporary profile will be a new one created by OOo with its own defaults settings, and relies on the `-nofirststartwizard` command line option.

You may want to provide a `templateProfileDir` containing customised settings instead. The `OfficeManager` will copy such template dir to the temporary profile, so OOo will use the same settings while still keeping the OOo instances separate.

The profile can be customised in OOo by selecting the Tools > Options menu item. Settings that may be worth customising for automated conversions include e.g.

 * Load/Save > General: you may e.g. want to disable "Save URLs relative to internet" for security reasons
 * Load/Save > Microsoft Office: these options affect conversions of embedded documents, e.g. an Excel table contained in a Word document. If not enabled, the embedded table will likely be lost when converting the Word document to another format.

== Connection Mode ==

OOo inter-process communication can use either TCP sockets or named pipes. The default is to use a TCP socket, usually on port 8100.

Named pipes have the advantage of not taking up TCP ports (with their potential security implications), and they are marginally faster. However they require a native library to be loaded by the JVM, and this means having to set the `java.library.path` system property. That's why it's not the default.

== Process Manager ==

By default JODConverter will use what pure Java provides for starting and stopping OOo processes. This is somewhat limited and doesn't allow e.g. to check that no other OOo process with the same parameters is already running before starting a new one.

More robust platform-specific functionality is available by using external tools, e.g. `ps` on Unix-like systems, but needs to be enabled by specifying an appropriate `ProcessManager` implementation as part of the `OfficeManager` configuration.
